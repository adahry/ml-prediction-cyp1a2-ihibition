# -*- coding: utf-8 -*-
"""GNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CaMzDrMoHudp53AYm0nizZc0UN9fMSvL
"""

import torch
from torch_geometric.nn import GATConv
import torch.nn.functional as F
from torch.nn import Linear
from torch_geometric.nn import global_mean_pool as gap, global_max_pool as gmp

class GNN(torch.nn.Module):
    def __init__(self,data,embedding_size):
        super(GNN, self).__init__()

        self.conv1 = GATConv(data.num_features, embedding_size, edge_dim = 10)
        self.conv2 = GATConv(embedding_size, embedding_size, edge_dim = 10)
        self.conv3 = GATConv(embedding_size, embedding_size, edge_dim = 10)
        self.conv4 = GATConv(embedding_size, embedding_size, edge_dim = 10)
        self.conv5 = GATConv(embedding_size, embedding_size, edge_dim = 10)

        self.out = Linear(embedding_size*2, 1)

    def forward(self, x, edge_index, edge_attr,batch_index):

      res = self.conv1(x, edge_index, edge_attr)
      res = F.relu(res)
      res = self.conv2(res, edge_index, edge_attr)
      res = F.relu(res)
      res = self.conv3(res, edge_index, edge_attr)
      res = F.relu(res)
      res = self.conv4(res, edge_index, edge_attr)
      res = F.relu(res)
      res = self.conv5(res, edge_index, edge_attr)
      res = F.sigmoid(res)

      #max&mean pooling
      res = torch.cat([gmp(res, batch_index), gap(res,batch_index)], dim=1)


      out = self.out(res)

      return out